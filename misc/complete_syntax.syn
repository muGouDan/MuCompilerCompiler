bTy		->	"int";
bTy		->	"float";
bTy		->	"char";
record	->	"struct";
record	->	"class";
num		->	digit;
id		->	identifier;
$$
Prgm_	->	Prgm;
Prgm	->	Stmt;
Prgm	->	epsilon;
Stmt	->	Stmt Stc;
Stmt	-> 	Stc;
Stc		-> 	_Definition.Stc;

_Definition:
Stc		->	M0 VarDef;							
M0		->	epsilon;						{begin_def};// top = var_table;	
VarDef	-> 	Def;							{end_vardef};

Stc		->	M1 TyDef;						
M1		->	epsilon;						{begin_typedef};// top = type_head
TyDef	->	TyHead "{" M2 Defs"}" ";";		{end_typedef};// get ILEntry from TyHead;TyHead.width = offset; pop table;
TyHead	->	Record Id;						{set_TypeHead};// new ILEntry;set type(struct/class/...);set Token(cTyname); AddEntry;
M2		->	epsilon;						{new_table};// push table;new table;

Defs	->	Defs Def;						{building_defs};
Defs	->	Def;							{begin_defs};
Def 	->	Ty Id ";";						{set_as_def};// get ILEntry from Ty;Get Token from Id; Ty.token = Id.token; AddEntry;

Ty		->	CTy;							{set_customeType_as_type};// search in type_head;copy;new ILEntry;set type;set width;
Ty		->	BTy Arr;						{complete_arrayType};
Ty		->  BTy;							{set_baseType_as_type}; // new ILEntry;set type;set width;
Arr		->  Arr Cmp;						{building_array};
Arr		->	Cmp;							{begin_array};

Cmp		->	"[" Num "]";					{get_component};
BTy		->	bTy;							{get_token};// pass Token;
CTy		->	id;								{get_token};// pass Token;
Record  ->	record;							{get_token};// pass Token;
Num		->	num;							{get_token};// pass Token;
Id		->	id;								{get_token};// pass Token;